{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"brAIns 3rd ","provenance":[],"authorship_tag":"ABX9TyOwGZ9x+H1KnhZ0FnAg9sNt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Psx9d6Xh_vC","executionInfo":{"status":"ok","timestamp":1615375399528,"user_tz":-540,"elapsed":771,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"06ab7440-05ed-48a8-da29-99b4c7a1b75e"},"source":["!nvidia-smi"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Wed Mar 10 11:23:18 2021       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.56       Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   41C    P8    10W /  70W |      0MiB / 15109MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"c7vxYuemlH1f"},"source":["## (Week 1) Git 으로 Environment 설치하기\r\n","- [박원님이 만든 Environment](https://github.com/circle-oo/gym-custom-env.git) 를 설치해봅시다\r\n","- git clone 을 이용하면 편하게 설치할 수 있습니다\u001f"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I4_ooodyiQc3","executionInfo":{"status":"ok","timestamp":1615375829856,"user_tz":-540,"elapsed":4123,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"c0a9f9b8-7aac-4482-9f3e-03e02096f576"},"source":["!git clone https://github.com/circle-oo/gym-custom-env.git\r\n","%cd /content/gym-custom-env/\r\n","!pip install -e ."],"execution_count":10,"outputs":[{"output_type":"stream","text":["Cloning into 'gym-custom-env'...\n","remote: Enumerating objects: 45, done.\u001b[K\n","remote: Counting objects:   2% (1/45)\u001b[K\rremote: Counting objects:   4% (2/45)\u001b[K\rremote: Counting objects:   6% (3/45)\u001b[K\rremote: Counting objects:   8% (4/45)\u001b[K\rremote: Counting objects:  11% (5/45)\u001b[K\rremote: Counting objects:  13% (6/45)\u001b[K\rremote: Counting objects:  15% (7/45)\u001b[K\rremote: Counting objects:  17% (8/45)\u001b[K\rremote: Counting objects:  20% (9/45)\u001b[K\rremote: Counting objects:  22% (10/45)\u001b[K\rremote: Counting objects:  24% (11/45)\u001b[K\rremote: Counting objects:  26% (12/45)\u001b[K\rremote: Counting objects:  28% (13/45)\u001b[K\rremote: Counting objects:  31% (14/45)\u001b[K\rremote: Counting objects:  33% (15/45)\u001b[K\rremote: Counting objects:  35% (16/45)\u001b[K\rremote: Counting objects:  37% (17/45)\u001b[K\rremote: Counting objects:  40% (18/45)\u001b[K\rremote: Counting objects:  42% (19/45)\u001b[K\rremote: Counting objects:  44% (20/45)\u001b[K\rremote: Counting objects:  46% (21/45)\u001b[K\rremote: Counting objects:  48% (22/45)\u001b[K\rremote: Counting objects:  51% (23/45)\u001b[K\rremote: Counting objects:  53% (24/45)\u001b[K\rremote: Counting objects:  55% (25/45)\u001b[K\rremote: Counting objects:  57% (26/45)\u001b[K\rremote: Counting objects:  60% (27/45)\u001b[K\rremote: Counting objects:  62% (28/45)\u001b[K\rremote: Counting objects:  64% (29/45)\u001b[K\rremote: Counting objects:  66% (30/45)\u001b[K\rremote: Counting objects:  68% (31/45)\u001b[K\rremote: Counting objects:  71% (32/45)\u001b[K\rremote: Counting objects:  73% (33/45)\u001b[K\rremote: Counting objects:  75% (34/45)\u001b[K\rremote: Counting objects:  77% (35/45)\u001b[K\rremote: Counting objects:  80% (36/45)\u001b[K\rremote: Counting objects:  82% (37/45)\u001b[K\rremote: Counting objects:  84% (38/45)\u001b[K\rremote: Counting objects:  86% (39/45)\u001b[K\rremote: Counting objects:  88% (40/45)\u001b[K\rremote: Counting objects:  91% (41/45)\u001b[K\rremote: Counting objects:  93% (42/45)\u001b[K\rremote: Counting objects:  95% (43/45)\u001b[K\rremote: Counting objects:  97% (44/45)\u001b[K\rremote: Counting objects: 100% (45/45)\u001b[K\rremote: Counting objects: 100% (45/45), done.\u001b[K\n","remote: Compressing objects:   3% (1/28)\u001b[K\rremote: Compressing objects:   7% (2/28)\u001b[K\rremote: Compressing objects:  10% (3/28)\u001b[K\rremote: Compressing objects:  14% (4/28)\u001b[K\rremote: Compressing objects:  17% (5/28)\u001b[K\rremote: Compressing objects:  21% (6/28)\u001b[K\rremote: Compressing objects:  25% (7/28)\u001b[K\rremote: Compressing objects:  28% (8/28)\u001b[K\rremote: Compressing objects:  32% (9/28)\u001b[K\rremote: Compressing objects:  35% (10/28)\u001b[K\rremote: Compressing objects:  39% (11/28)\u001b[K\rremote: Compressing objects:  42% (12/28)\u001b[K\rremote: Compressing objects:  46% (13/28)\u001b[K\rremote: Compressing objects:  50% (14/28)\u001b[K\rremote: Compressing objects:  53% (15/28)\u001b[K\rremote: Compressing objects:  57% (16/28)\u001b[K\rremote: Compressing objects:  60% (17/28)\u001b[K\rremote: Compressing objects:  64% (18/28)\u001b[K\rremote: Compressing objects:  67% (19/28)\u001b[K\rremote: Compressing objects:  71% (20/28)\u001b[K\rremote: Compressing objects:  75% (21/28)\u001b[K\rremote: Compressing objects:  78% (22/28)\u001b[K\rremote: Compressing objects:  82% (23/28)\u001b[K\rremote: Compressing objects:  85% (24/28)\u001b[K\rremote: Compressing objects:  89% (25/28)\u001b[K\rremote: Compressing objects:  92% (26/28)\u001b[K\rremote: Compressing objects:  96% (27/28)\u001b[K\rremote: Compressing objects: 100% (28/28)\u001b[K\rremote: Compressing objects: 100% (28/28), done.\u001b[K\n","remote: Total 45 (delta 19), reused 42 (delta 16), pack-reused 0\u001b[K\n","Unpacking objects:   2% (1/45)   \rUnpacking objects:   4% (2/45)   \rUnpacking objects:   6% (3/45)   \rUnpacking objects:   8% (4/45)   \rUnpacking objects:  11% (5/45)   \rUnpacking objects:  13% (6/45)   \rUnpacking objects:  15% (7/45)   \rUnpacking objects:  17% (8/45)   \rUnpacking objects:  20% (9/45)   \rUnpacking objects:  22% (10/45)   \rUnpacking objects:  24% (11/45)   \rUnpacking objects:  26% (12/45)   \rUnpacking objects:  28% (13/45)   \rUnpacking objects:  31% (14/45)   \rUnpacking objects:  33% (15/45)   \rUnpacking objects:  35% (16/45)   \rUnpacking objects:  37% (17/45)   \rUnpacking objects:  40% (18/45)   \rUnpacking objects:  42% (19/45)   \rUnpacking objects:  44% (20/45)   \rUnpacking objects:  46% (21/45)   \rUnpacking objects:  48% (22/45)   \rUnpacking objects:  51% (23/45)   \rUnpacking objects:  53% (24/45)   \rUnpacking objects:  55% (25/45)   \rUnpacking objects:  57% (26/45)   \rUnpacking objects:  60% (27/45)   \rUnpacking objects:  62% (28/45)   \rUnpacking objects:  64% (29/45)   \rUnpacking objects:  66% (30/45)   \rUnpacking objects:  68% (31/45)   \rUnpacking objects:  71% (32/45)   \rUnpacking objects:  73% (33/45)   \rUnpacking objects:  75% (34/45)   \rUnpacking objects:  77% (35/45)   \rUnpacking objects:  80% (36/45)   \rUnpacking objects:  82% (37/45)   \rUnpacking objects:  84% (38/45)   \rUnpacking objects:  86% (39/45)   \rUnpacking objects:  88% (40/45)   \rUnpacking objects:  91% (41/45)   \rUnpacking objects:  93% (42/45)   \rUnpacking objects:  95% (43/45)   \rUnpacking objects:  97% (44/45)   \rUnpacking objects: 100% (45/45)   \rUnpacking objects: 100% (45/45), done.\n","/content/gym-custom-env\n","Obtaining file:///content/gym-custom-env\n","Requirement already satisfied: gym in /usr/local/lib/python3.7/dist-packages (from gym-custom-env==1.0.0) (0.17.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from gym-custom-env==1.0.0) (1.19.5)\n","Requirement already satisfied: pyglet<=1.5.0,>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from gym->gym-custom-env==1.0.0) (1.5.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from gym->gym-custom-env==1.0.0) (1.4.1)\n","Requirement already satisfied: cloudpickle<1.7.0,>=1.2.0 in /usr/local/lib/python3.7/dist-packages (from gym->gym-custom-env==1.0.0) (1.3.0)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyglet<=1.5.0,>=1.4.0->gym->gym-custom-env==1.0.0) (0.16.0)\n","Installing collected packages: gym-custom-env\n","  Found existing installation: gym-custom-env 1.0.0\n","    Can't uninstall 'gym-custom-env'. No files were found to uninstall.\n","  Running setup.py develop for gym-custom-env\n","Successfully installed gym-custom-env\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GOFszE2JlL7G"},"source":["from env.breakout import Breakout"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fSa0LoJUlMWX","executionInfo":{"status":"ok","timestamp":1613558820199,"user_tz":-540,"elapsed":6303,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"f520a7c0-5639-42f4-e8ab-adac1c4c1a24"},"source":["env = Breakout(False) # env 에서 렌더링 설정 하는 녀석\r\n","env.reset()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        ...,\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.]]])"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"JNfbMA0JlNkP"},"source":["import numpy as np\r\n","from IPython.display import clear_output\r\n","import matplotlib.pyplot as plt\r\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":193},"id":"hEca9gqflOer","executionInfo":{"status":"ok","timestamp":1613558822689,"user_tz":-540,"elapsed":8056,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"509a8456-f4ab-44e1-ceb4-5500d016eb9e"},"source":["fig = plt.figure(figsize=(60, 20))\r\n","plot_nums = 6\r\n","ax = [fig.add_subplot(1, plot_nums, x+1) for x in range(plot_nums)]\r\n","\r\n","for i in range(plot_nums):\r\n","    action = np.random.choice(4)\r\n","    state, reward, done, info = env.step(action)\r\n","    ax[i].imshow(state[0])\r\n","fig.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 4320x1440 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"KYnFlesslUOv"},"source":["# (Week 2) Frozen Lake 정복하기\r\n","- `gym` 환경을 import 하는 법을 먼저 배우자"]},{"cell_type":"code","metadata":{"id":"_HZU55cWlRSf"},"source":["import gym\r\n","import numpy as np\r\n","from gym.envs.registration import register\r\n","\r\n","register(\r\n","    id=\"FrozenLake-v3\",\r\n","    entry_point='gym.envs.toy_text:FrozenLakeEnv',\r\n","    kwargs={'map_name': '4x4',\r\n","            'is_slippery': False\r\n","    } \r\n",")\r\n","\r\n","env_frozen_lake=gym.make('FrozenLake-v3')\r\n","env_frozen_lake_stochastic=gym.make('FrozenLake-v0')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AKMzgEt3lUtP"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9i6BPNQklWzT"},"source":["## Q-Learning 알고리즘 구현하기\r\n","- Q 함수의 정의역 (state, action): 16 x 4\r\n","- Optimal policy:\r\n","$$\r\n","\\pi^{*}(s)=\\underset{a}{\\text{argmax }} Q(s,a)\r\n","$$\r\n","\r\n","$$\r\n","Q(s, \\pi^{*}(s))= \\max_{a}Q(s,a)\r\n","$$\r\n","\r\n","- Observation\r\n","$$\r\n","(s_{t}, a_{t}, r_{t+1}, s_{t+1})\r\n","$$\r\n","\r\n","- Q-Learning Algorithm (naive)\r\n","$$\r\n","\\widehat{Q}_{t+1}(s_{t},a_{t}) \\leftarrow r_{t+1} + \\max_{a}\\widehat{Q}_{t}(s_{t+1},a)\r\n","$$\r\n","\r\n","$$\r\n","R_{t} = \\sum_{s=t}^{n}r_{s}\r\n","$$"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9BageG4rlXL6","executionInfo":{"status":"ok","timestamp":1613558927553,"user_tz":-540,"elapsed":1009,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"c5c9303c-8849-4f0c-a07a-f8353996b7b4"},"source":["Q_domain = [env_frozen_lake.observation_space.n, env_frozen_lake.action_space.n]\r\n","print(Q_domain)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[16, 4]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OTRBoX9qlYq5"},"source":["\"\"\"random argmax 코드: 최대값이 여러개일 때 하나를 랜덤하게 선택하기\"\"\"\r\n","def rargmax(array):\r\n","    max_value = np.amax(array)\r\n","    indices = np.nonzero(array == max_value)[0]\r\n","    return np.random.choice(indices)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OT6E1KdDlZfS"},"source":["num_episodes = 2000\r\n","Q = np.zeros(Q_domain) # 초기 Q 함수 정의하기\r\n","\r\n","reward_list = [] # 최종 reward 합을 기록하는 리스트\r\n","\r\n","\"\"\"Q-Learning 알고리즘 시자아아아아아악\"\"\"\r\n","for episode in range(num_episodes):\r\n","    # episode 를 리셋합니다\r\n","    state = env_frozen_lake.reset()\r\n","    reward_cumulative = 0 # R_1\r\n","    done = False\r\n","\r\n","    while not done: # 게임이 끝날때까지 계속해라 (done=True 가 될 때까지)\r\n","        # Optimal action 을 선택\r\n","        action = rargmax(Q[state, :])\r\n","        # Step 1: 새로운 state 와 reward 를 관찰한다\r\n","        new_state, reward, done, info = env_frozen_lake.step(action)\r\n","        # Step 2: Q-함수를 업데이트한다\r\n","        Q[state, action] = reward + np.max(Q[new_state, :])\r\n","\r\n","        reward_cumulative += reward\r\n","        state = new_state\r\n","    \r\n","    reward_list.append(reward_cumulative)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-FVuwsZVlark","executionInfo":{"status":"ok","timestamp":1613560165640,"user_tz":-540,"elapsed":1643,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"b2d6096c-8918-4411-f233-be8caddef9d2"},"source":["print(\"Left, Down, Right, Up\")\r\n","print(Q)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Left, Down, Right, Up\n","[[0. 1. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 1. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 1. 0.]\n"," [0. 0. 1. 0.]\n"," [0. 1. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 1. 0.]\n"," [0. 0. 0. 0.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-9SZzWfllcEX","executionInfo":{"status":"ok","timestamp":1613560165641,"user_tz":-540,"elapsed":1143,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"147c8c15-6219-4129-f92f-f4e2f5a002d2"},"source":["success_rate = 100 * np.sum(reward_list) / num_episodes\r\n","print(\"Success rate: {} %\".format(success_rate))\r\n","# plt.bar(range(len(reward_list)), reward_list, color='blue')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Success rate: 94.15 %\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"nRCIlNrBldby","executionInfo":{"status":"ok","timestamp":1613560166605,"user_tz":-540,"elapsed":948,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"ff0da4b9-b156-4ab0-fe71-bfd8ac81ad6b"},"source":["reward_cumsuccess = 100 * np.cumsum(reward_list) / (1 + np.arange(num_episodes))\r\n","plt.plot(reward_cumsuccess)\r\n","plt.ylabel('Success-rate')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Success-rate')"]},"metadata":{"tags":[]},"execution_count":91},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"8LmbpDb3liHZ"},"source":["# (Week 3) Exploit & Exploration\r\n","- RL 알고리즘의 퀄리티를 생각한다면 E&E 가 매우 중요하다!\r\n","\r\n","## Discounted reward\r\n","\r\n","$$\r\n","\\hat{Q}(s,a) \\leftarrow r + {\\color{red}\\gamma} \\max_{a}\\hat{Q}(s',a')\r\n","$$\r\n"]},{"cell_type":"code","metadata":{"id":"igk8oujulekr"},"source":["# Initialize table with all zeros\r\n","Q_domain = [env_frozen_lake.observation_space.n, env_frozen_lake.action_space.n]\r\n","Q = np.zeros(Q_domain)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E6Vdh6wTmF2T"},"source":["discount = 0.9"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rq_93DT3l7qs"},"source":["num_episodes = 5000\r\n","reward_list = [] # 최종 reward 합을 기록하는 리스트\r\n","\r\n","\"\"\"Q-Learning 알고리즘 시자아아아아아악\"\"\"\r\n","for episode in range(num_episodes):\r\n","    # episode 를 리셋합니다\r\n","    state = env_frozen_lake.reset()\r\n","    reward_cumulative = 0 # R_1\r\n","    done = False\r\n","\r\n","    while not done: # 게임이 끝날때까지 계속해라 (done=True 가 될 때까지)\r\n","       # Optimal action 을 선택 + Gaussian 분포에서 noise 를 샘플링해서 더해준다.\r\n","       # action = rargmax(Q[state, :] + np.random.rand(1,env_frozen_lake.action_space.n)/(episode+1) )\r\n","        \r\n","        action = np.argmax(Q[state, :] + np.random.rand(1,env_frozen_lake.action_space.n)/(episode+1) )\r\n","        \r\n","        # Step 1: 새로운 state 와 reward 를 관찰한다\r\n","        new_state, reward, done, info = env_frozen_lake.step(action)\r\n","        # Step 2: Q-함수를 \"discount 만큼 곱해서\" 업데이트한다\r\n","        Q[state, action] = reward + discount * np.max(Q[new_state, :])\r\n","\r\n","        reward_cumulative += reward\r\n","        state = new_state\r\n","    \r\n","    reward_list.append(reward_cumulative)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qidyvbcJl7oL","executionInfo":{"status":"ok","timestamp":1613560170274,"user_tz":-540,"elapsed":2288,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"9d8dd644-3539-4622-f381-328684cc90a0"},"source":["print(\"Left, Down, Right, Up\")\r\n","print(Q)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Left, Down, Right, Up\n","[[0.      0.      0.59049 0.     ]\n"," [0.      0.      0.6561  0.     ]\n"," [0.      0.729   0.      0.     ]\n"," [0.      0.      0.      0.     ]\n"," [0.      0.      0.      0.     ]\n"," [0.      0.      0.      0.     ]\n"," [0.      0.81    0.      0.     ]\n"," [0.      0.      0.      0.     ]\n"," [0.      0.      0.      0.     ]\n"," [0.      0.      0.81    0.     ]\n"," [0.      0.9     0.      0.     ]\n"," [0.      0.      0.      0.     ]\n"," [0.      0.      0.      0.     ]\n"," [0.      0.      0.      0.     ]\n"," [0.      0.      1.      0.     ]\n"," [0.      0.      0.      0.     ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NLfQyTueotei","executionInfo":{"status":"ok","timestamp":1613560170275,"user_tz":-540,"elapsed":1906,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"c1364d3c-5472-40ff-9d35-25961246a9b7"},"source":["success_rate = 100 * np.sum(reward_list) / num_episodes\r\n","print(\"Success rate: {} %\".format(success_rate))\r\n","# plt.bar(range(len(reward_list)), reward_list, color='blue')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Success rate: 96.74 %\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":284},"id":"M4-5kBQCoXiO","executionInfo":{"status":"ok","timestamp":1613560170278,"user_tz":-540,"elapsed":1464,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"52e9a11e-ff83-4319-fecf-f3b083de7fd5"},"source":["reward_cumsuccess = 100 * np.cumsum(reward_list) / (1 + np.arange(num_episodes))\r\n","plt.plot(reward_cumsuccess)\r\n","plt.ylabel('Success-rate')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Success-rate')"]},"metadata":{"tags":[]},"execution_count":97},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"2Au6e307nwI-"},"source":["#[week 4] Stochastic Environment \r\n","- 만일 action 에 따라 결과가 random 하게 바뀐다면 RL 학습은 어떻게 될까?\r\n","  - 결과가 random 하게 바뀐다는 것은 environment가 stochastic 라는 뜻이고, 좀 더 정확히 말하면, transition probability(=modl 또는 dynamnics) 가 에 의해 action의 결과가 좌우되는 상황 \r\n","  - random environment 상황? -> short-term financial market 에서 주가 정보만 활용 하는 경우\r\n","  - long-term market에서 주가 뿐만 아니라, 다른 정보들 (SNS, 재무제표 등) 을 활용할 수 있으면, 학습은 가능하다.\r\n","  "]},{"cell_type":"code","metadata":{"id":"b_gWWXuXodUK"},"source":["# Initialize table with all zeros\r\n","Q_domain = [env_frozen_lake_stochastic.observation_space.n, env_frozen_lake_stochastic.action_space.n]\r\n","Q = np.zeros(Q_domain)\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CRJN7y0HpokS"},"source":["discount = 0.9\r\n","alpha = 0.85 # 수식에서 alpha 에 해당한다.\r\n","num_episodes = 5000\r\n","reward_list = [] # 최종 reward 합을 기록하는 리스트\r\n","\r\n","\"\"\"Q-Learning 알고리즘 시자아아아아아악\"\"\"\r\n","for episode in range(num_episodes):\r\n","    # episode 를 리셋합니다\r\n","    state = env_frozen_lake_stochastic.reset()\r\n","    reward_cumulative = 0 # R_1\r\n","    done = False\r\n","\r\n","    while not done: # 게임이 끝날때까지 계속해라 (done=True 가 될 때까지)\r\n","       # Optimal action 을 선택 + Gaussian 분포에서 noise 를 샘플링해서 더해준다.\r\n","       # action = rargmax(Q[state, :] + np.random.rand(1,env_frozen_lake.action_space.n)/(episode+1) )\r\n","        \r\n","        action = np.argmax(Q[state, :] + np.random.rand(1,env_frozen_lake_stochastic.action_space.n)/(episode+1) )\r\n","        \r\n","        # Step 1: 새로운 state 와 reward 를 관찰한다\r\n","        new_state, reward, done, info = env_frozen_lake_stochastic.step(action)\r\n","        # Step 2: Q-함수를 \"discount 만큼 곱해서\" 업데이트한다/ alpha 란 learning_rate \r\n","        Q[state, action] =  (1-alpha)* Q[state, action]   + alpha*(reward + discount * np.max(Q[new_state, :]))\r\n","\r\n","        reward_cumulative += reward\r\n","        state = new_state\r\n","    \r\n","    reward_list.append(reward_cumulative)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cilaoTHTqVy8","executionInfo":{"status":"ok","timestamp":1613560347607,"user_tz":-540,"elapsed":942,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"b0fe8ce2-0ccc-4acf-e9b9-b26f72f4d5bb"},"source":["print(\"Left, Down, Right, Up\")\r\n","print(Q)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Left, Down, Right, Up\n","[[4.52543541e-02 3.33827131e-04 3.70272858e-04 2.81838837e-04]\n"," [2.18076772e-05 5.16176561e-05 3.28139163e-06 8.75767462e-02]\n"," [3.08622190e-04 2.34546118e-04 1.39596693e-04 1.20614285e-02]\n"," [2.43122810e-05 2.87805712e-04 5.70156751e-06 7.80697581e-03]\n"," [8.30320515e-02 7.22136312e-05 7.54962280e-05 1.10710132e-05]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]\n"," [6.00665847e-04 5.41855989e-06 8.22282614e-06 2.67128121e-05]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]\n"," [3.91003383e-06 8.17331768e-05 9.00788130e-05 3.21518869e-01]\n"," [5.62451331e-05 1.19326942e-01 2.02681886e-04 6.78320993e-05]\n"," [2.21964548e-02 2.96641951e-05 3.74392684e-05 2.96496037e-05]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]\n"," [0.00000000e+00 9.20037038e-04 5.30753269e-01 1.27411756e-04]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 9.60436631e-01]\n"," [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":301},"id":"Oqcu3MoZqYPR","executionInfo":{"status":"ok","timestamp":1613560361039,"user_tz":-540,"elapsed":12572,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"36a727ea-4e2c-4338-9823-fcaba8729618"},"source":["success_rate = 100 * np.sum(reward_list) / num_episodes\r\n","print(\"Success rate: {} %\".format(success_rate))\r\n","plt.bar(range(len(reward_list)), reward_list, color='blue')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Success rate: 51.82 %\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<BarContainer object of 5000 artists>"]},"metadata":{"tags":[]},"execution_count":108},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"_HiEnmpbqZ09","executionInfo":{"status":"ok","timestamp":1613560362647,"user_tz":-540,"elapsed":1595,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"9b623ddf-29ac-4f06-d112-6882729f3688"},"source":["reward_cumsuccess = 100 * np.cumsum(reward_list) / (1 + np.arange(num_episodes))\r\n","plt.plot(reward_cumsuccess)\r\n","plt.ylabel('Success-rate')\r\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Success-rate')"]},"metadata":{"tags":[]},"execution_count":109},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"JxK-33Sj4N_3"},"source":["# 마지막 DQN 수업"]},{"cell_type":"code","metadata":{"id":"ViKty74gqbgE","executionInfo":{"status":"ok","timestamp":1615375834612,"user_tz":-540,"elapsed":881,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["from env.cartpole import CartPole\r\n","env_cartpole = CartPole(\"False\")"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CYiorPrK4hTw","executionInfo":{"status":"ok","timestamp":1615375834988,"user_tz":-540,"elapsed":905,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"fad666c2-ab4b-4c72-cf95-2bdbb9fad4f5"},"source":["print(env_cartpole.state_number, env_cartpole.action_number)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["4 2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yIXKc96o4qSH","executionInfo":{"status":"ok","timestamp":1615375835469,"user_tz":-540,"elapsed":1150,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["import math, random\r\n","import numpy as np\r\n","import torch \r\n","import torch.nn as nn \r\n","import torch.optim as optim\r\n","import torch.autograd as autograd\r\n","import torch.nn.functional as F"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2xyYwFWM5NLV","executionInfo":{"status":"ok","timestamp":1615375835472,"user_tz":-540,"elapsed":926,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"4d230430-388e-4a1a-85e7-290f52dc8202"},"source":["USE_CUDA = torch.cuda.is_available()\r\n","print(USE_CUDA)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qjaf5MYf5jOr","executionInfo":{"status":"ok","timestamp":1615376008883,"user_tz":-540,"elapsed":585,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["def _variable(tensor):\r\n","  if USE_CUDA:\r\n","    return tensor.cuda()\r\n","  else:\r\n","    return tensor"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aZcziBkc-COP"},"source":["## Deep Neural Network 를 만들어보자!"]},{"cell_type":"code","metadata":{"id":"YtR-ShDE6cPR","executionInfo":{"status":"ok","timestamp":1615380027856,"user_tz":-540,"elapsed":1247,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["class DQN(nn.Module):\r\n","  def __init__(self, num_inputs, num_actions):\r\n","    self.num_actions = num_actions\r\n","    super(DQN,self).__init__()\r\n","\r\n","    self.layers =  nn.Sequential(\r\n","        nn.Linear(num_inputs,128),\r\n","        nn.ReLU(),\r\n","        nn.Linear(128,128),\r\n","        nn.ReLU(),\r\n","        nn.Linear(128,num_actions)\r\n","    )\r\n","  def forward(self,x):\r\n","    # Q 값을 예측하는 함수\r\n","    return self.layers(x)\r\n","\r\n","  def act(self, state, epsilon):\r\n","    # Q 값을 토대로 다음 action 을 결정하는 함수 + epsilon greedy\r\n","    if random.random() > epsilon:\r\n","      state = send_tensor_device(torch.FloatTensor(state).unsqueeze(0), volatile = True)\r\n","      q_value = self.forward(state)\r\n","      action = q_value.max(1)[1].data[0]\r\n","      action = action.numpy()\r\n","\r\n","    else:\r\n","      action = random.randrange(num_actions)"],"execution_count":35,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3sT9vHu-9ygm"},"source":["\r\n","\r\n","*   항목 추가\r\n","*   항목 추가\r\n","\r\n"]},{"cell_type":"code","metadata":{"id":"VqTa5Wwf9PQi","executionInfo":{"status":"ok","timestamp":1615380027857,"user_tz":-540,"elapsed":682,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["model = DQN(env_cartpole.state_number, env_cartpole.action_number)"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0m0-BevH93O-","executionInfo":{"status":"ok","timestamp":1615380029073,"user_tz":-540,"elapsed":1203,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"f1368a09-e0cc-45dc-994e-72251a69af1a"},"source":["print(model.parameters)"],"execution_count":37,"outputs":[{"output_type":"stream","text":["<bound method Module.parameters of DQN(\n","  (layers): Sequential(\n","    (0): Linear(in_features=4, out_features=128, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=128, out_features=128, bias=True)\n","    (3): ReLU()\n","    (4): Linear(in_features=128, out_features=2, bias=True)\n","  )\n",")>\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aYAqnI_c-Fha"},"source":["## Replay Buffer 를 구현해보자!"]},{"cell_type":"code","metadata":{"id":"7X2s8elp94n-","executionInfo":{"status":"ok","timestamp":1615380029076,"user_tz":-540,"elapsed":1199,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["from collections import deque\r\n","\r\n","class ReplayBuffer(object):\r\n","  def __init__(self, capacity):\r\n","    self.buffer = deque(maxlen = capacity)\r\n","\r\n","  def push (self, state, action, reward, next_state, done):\r\n","    state = np.expand_dims(state, 0)\r\n","    next_state = np.expand_dims(next_state, 0)\r\n","\r\n","    self.buffer.append((state, action, reward, next_state, done))\r\n","\r\n","  def sample(self, batch_size):\r\n","    state, action, reward, next_state, done = zip(*random.sample(self.buffer, batch_size))\r\n","    return np.concatenate(state),action,reward, np.concatenate(next_state), done\r\n","    \r\n","  def __len__(self):\r\n","    return len(self.buffer)"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"AvNKHac7_rCF","executionInfo":{"status":"ok","timestamp":1615380032162,"user_tz":-540,"elapsed":702,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["replay_buffer = ReplayBuffer(1000)"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"id":"aR56XuK6_soD","executionInfo":{"status":"ok","timestamp":1615380078318,"user_tz":-540,"elapsed":715,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["def compute_td_loss(batch_size, gamma):\r\n","  state, action, rward, next_state, done = replay_buffer.sample(batch_size)\r\n","\r\n","  state = send_tensor_device(torch.FloatTensor(np.float32(state)))\r\n","  next_state = send_tensor_device(torch.FloatTensor(np.float32(next_state)))\r\n","  action = send_tensor_device(torch.LongTensor(np.int64(action)))\r\n","  reward = send_tensor_device(torch.FloatTensor(np.float32(reward)))\r\n","  done = send_tensor_device(torch.Tensor(done))\r\n","\r\n","  q_values = model(state)\r\n","  next_q_values = model(next_state)\r\n","\r\n","  q_value = q_values.gather(1, action.unsqueeze(1)).squeeze(1)\r\n","  next_q_value = next_q_values.max(1)[0]\r\n","  expected_q_value = reward + gamma + next_q_value * (1-done)\r\n","\r\n","  td_loss = (q_value - send_tensor_device(expected_q_value.data)).pow(2).mean()\r\n","\r\n","  optimizer.zero_grad()\r\n","  td.loss.backward()\r\n","  optimizer.step()\r\n","\r\n","  return td_loss"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"id":"UDvhPxUFDnwn","executionInfo":{"status":"ok","timestamp":1615380034311,"user_tz":-540,"elapsed":885,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["import matplotlib.pyplot as plt\r\n","\r\n","def plot(frame_idx, rewards, losses):\r\n","  clear_output(True)\r\n","  plt.figure(figsize = (20,5))\r\n","  plt.subplot(131)\r\n","  plt.title(\"frame %s. rewards = %s\" %(frame_idx, np.mean(rewards[-10:])))\r\n","  plt.plot(rewards)\r\n","  plt.subplot(132)\r\n","  plt.title(\"loss\")\r\n","  plt.plot(losses)\r\n","  plt.show()\r\n"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"n7o5f8PcHjiU","executionInfo":{"status":"ok","timestamp":1615380034312,"user_tz":-540,"elapsed":612,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}}},"source":["epsilon_start = 1.0\r\n","epsilon_final = 0.01\r\n","epsilon_decay = 500\r\n","\r\n","def epsilon_by_frame(frame_idx):\r\n","  epsilon_final  = (epsilon_start - epsilon_final) * math.exp(-1. * frame_idx / epsilon_decay)\r\n","  return epsilon"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":352},"id":"3NfrXHjWH8g4","executionInfo":{"status":"error","timestamp":1615380080680,"user_tz":-540,"elapsed":738,"user":{"displayName":"유재상","photoUrl":"","userId":"11404826769534788630"}},"outputId":"fbbf2309-fed0-460c-a63f-019c028a8fe7"},"source":["episodes = 100\r\n","batch_size = 32\r\n","gamma = 0.99\r\n","\r\n","losses = []\r\n","all_reward = []\r\n","episode_reward = 0\r\n","\r\n","for episode in range(1, episodes +1):\r\n","  epsilon = epsilon_by_frame(episode)\r\n","  action = model.act(state, epsilon)\r\n","  next_state, reward , done , _ = env_cartpole.step(action)\r\n","\r\n","  replay_buffer.push(state, action, reward, next_state, done)\r\n","  \r\n","  state = next_state\r\n","  episode_reward += reward\r\n","  if done:\r\n","    state = env_cartpole.rest()\r\n","    all_rewards.append(episode_reward)\r\n","    episode_reward = 0\r\n","\r\n","\r\n","    if len(replay_buffer) > batch_size:\r\n","      loss = compute_td_loss(batch_size , gamma)\r\n","      losses.append(loss.data)\r\n","\r\n","    if episode % 100 ==0:\r\n","      plot(episode,all_rewards, losses)"],"execution_count":45,"outputs":[{"output_type":"error","ename":"UnboundLocalError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-45-0989cf17f6f2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepisode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepisodes\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m   \u001b[0mepsilon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mepsilon_by_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepisode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m   \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepsilon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0mnext_state\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreward\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mdone\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menv_cartpole\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-42-3a09c8c4c104>\u001b[0m in \u001b[0;36mepsilon_by_frame\u001b[0;34m(frame_idx)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mepsilon_by_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m   \u001b[0mepsilon_final\u001b[0m  \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mepsilon_start\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mepsilon_final\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1.\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mframe_idx\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mepsilon_decay\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mepsilon\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mUnboundLocalError\u001b[0m: local variable 'epsilon_final' referenced before assignment"]}]},{"cell_type":"code","metadata":{"id":"8T--DZ_-Jbxw"},"source":[""],"execution_count":null,"outputs":[]}]}